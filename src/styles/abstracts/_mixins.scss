@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';

/* Viewport breakpoint map */
$breakpoints: (
  'lt-xxs': (
    max-width: 350px,
  ),
  'gt-xxs': (
    min-width: 350px,
  ),
  'lt-xs': (
    max-width: 420px,
  ),
  'gt-xs': (
    min-width: 420px,
  ),
  'lt-sm': (
    max-width: 500px,
  ),
  'gt-sm': (
    min-width: 500px,
  ),
  'lt-md': (
    max-width: 700px,
  ),
  'gt-md': (
    min-width: 700px,
  ),
  'lt-lg': (
    max-width: 1000px,
  ),
  'gt-lg': (
    min-width: 1000px,
  ),
  'lt-xl': (
    max-width: 1500px,
  ),
  'gt-xl': (
    min-width: 1500px,
  ),
);

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map.get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      meta.type-of($raw-query) == 'string',
      meta.unquote($raw-query),
      meta.inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error '[LCC] No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin icon-size($size) {
  width: $size;
  height: $size;
  font-size: $size;
  vertical-align: text-bottom;
}

/// A mixin to be applied to flex items to keep item widths the same
/// when row wrapping and stretching to fit flex container
/// Courtesy of: https://stackoverflow.com/questions/23274338
@mixin flex-wrap-fix-width($flex-basis, $grid-gap, $max-viewport-width) {
  flex-grow: 1;
  flex-basis: $flex-basis;
  max-width: 100%;

  $multiplier: 1;
  $current-width: 0;

  @while ($current-width < $max-viewport-width) {
    $current-width: $current-width + $flex-basis;
    $multiplier: $multiplier + 1;

    @media (min-width: ($flex-basis* $multiplier)) {
      max-width: calc(math.percentage(math.div(1, $multiplier)) - $grid-gap);
    }
  }
}
